What I'm trying to achieve with this project:
- Full stack development: while the goal is the backend, I'd like to gain experience building user interfaces through this project. 
- Security: I want to have hands on experience building user authentication, authorization, and OAuth2.0 flows
- Client and server work: I want experience in building something clients want (an OAuth2.0 server for fetching user data), and then building something customers want (a client application for making use of their data in the third-party application)
- Testing: I want experience writing tests using popular test frameworks like Mocha
- Deployment: I'd like to get to the point of deploying this via Docker to better understand the development lifecycle from a developer perspective

---

KEY AREAS TO WORK OUT:
- how do redirects work around redirect_url? are we just hanging on redirect_url screen while it makes the /token request, and then having it handle the redirect back to whatever page it thinks we were at (e.g. /transactions)?
- how are access tokens to be stored per user, so that a user's session only has access to that users' access tokens? are we trusting sessions here, or do we want to explore user context?
    - benefit to using the JWT is there's no database overhead, and this is entirely stateless and free from consuming more memory

- user signs in to client application
- session token is generated in client application, with user id as a claim 
- user navigates to /transactions
- node.js for this page will attempt to fetch access_token from database for the user the session relates to
- if access token exists, then we will be using this to fetch data from bank, and return this to the user (worry about this part later)
- if access token deosn't exist, render a 'connect to bank' button that will make the request to bank

Other flows to do:
- client Credentials:
    - client authenticates directly with IdP using client_id and client_secret
    - clietn gets access token from IdP as a result
    - give access token to oauth2 server
    - oauth2 sends to IdP to get resources
- implicit code
    - standard authorization code flow, but skip authorization code bit lol
- resource owner password:
    - user signs in to client app
    - client app requests to idp using user credentials, client id, and client secret
    - access token sent to client app, sent to oauth2 server